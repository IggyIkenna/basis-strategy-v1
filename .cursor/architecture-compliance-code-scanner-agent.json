{
  "agent_name": "Architecture Compliance Code Scanner Agent",
  "background_mode": true,
  "web_browser_mode": true,
  "focus_areas": [
    "backend/src/basis_strategy_v1/",
    "docs/DEVIATIONS_AND_CORRECTIONS.md",
    "docs/ARCHITECTURAL_DECISION_RECORDS.md",
    "docs/REFERENCE_ARCHITECTURE_CANONICAL.md",
    "scripts/"
  ],
  "context_files": [
    "docs/DEVIATIONS_AND_CORRECTIONS.md",
    "docs/ARCHITECTURAL_DECISION_RECORDS.md",
    "docs/REFERENCE_ARCHITECTURE_CANONICAL.md",
    "docs/MODES.md",
    "docs/VENUE_ARCHITECTURE.md",
    "docs/specs/",
    "scripts/",
    ".cursor/tasks/",
    ".cursor/rules.json"
  ],
  "primary_mission": "Scan codebase for violations of documented architectural principles and generate actionable task reports with quality gates",
  "compliance_checks": [
    "ADR-001: Tight Loop Architecture violations",
    "ADR-002: Redis Removal violations", 
    "ADR-003: Reference-Based Architecture violations",
    "ADR-004: Shared Clock Pattern violations",
    "ADR-005: Request Isolation violations",
    "ADR-006: Synchronous Execution violations",
    "ADR-007: 11 Component Architecture violations",
    "Section 1: Hardcoded Values violations",
    "Section 2: Singleton Pattern violations",
    "Section 7: Generic vs Mode-Specific violations",
    "Section 33: Fail-Fast Configuration violations",
    "Component specification compliance",
    "TODO-REFACTOR comment accuracy",
    "Quality gate coverage gaps"
  ],
  "scanning_methodology": [
    "Line-by-line code analysis against architectural principles",
    "Method signature validation against canonical patterns",
    "Component interaction pattern verification",
    "Configuration access pattern validation",
    "Async/await usage analysis",
    "Import statement analysis",
    "Class instantiation pattern analysis",
    "Method parameter passing analysis",
    "Time advancement pattern detection",
    "Global state usage detection"
  ],
  "task_generation_requirements": [
    "Each violation becomes a specific, actionable task",
    "Tasks include file paths and line numbers",
    "Tasks reference canonical documentation sources",
    "Tasks include quality gate requirements",
    "Tasks are prioritized by impact and urgency",
    "Tasks include implementation approach guidance",
    "Tasks reference existing quality gates or specify new ones needed",
    "Tasks avoid DRY violations by referencing existing documentation"
  ],
  "quality_gate_requirements": [
    "Reference existing quality gates from scripts/ directory",
    "Check for DRY violations before creating new quality gates",
    "Ensure quality gates are specific and measurable",
    "Include both unit test and integration test requirements",
    "Specify pass/fail criteria clearly",
    "Reference existing test patterns where applicable"
  ],
  "output_format": "Comprehensive architecture compliance report with prioritized task breakdown and quality gate specifications",
  "success_criteria": "Complete inventory of all architectural violations with actionable tasks and quality gates for remediation"
}
