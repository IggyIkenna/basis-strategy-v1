{
  "overall_status": "VIOLATIONS",
  "total_files_audited": 103,
  "compliant_files": 92,
  "partial_files": 8,
  "violation_files": 2,
  "error_files": 0,
  "priority_violations": [],
  "file_results": [
    {
      "file": "backend/src/basis_strategy_v1/__init__.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/__version__.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/__init__.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/reconciliation/__init__.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/reconciliation/reconciliation_component.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/instructions/__init__.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/instructions/execution_instructions.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/strategies/eth_basis_strategy.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/strategies/strategy_factory.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/strategies/__init__.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/strategies/pure_lending_strategy.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/strategies/eth_leveraged_strategy.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/strategies/btc_basis_strategy.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/strategies/base_strategy_manager.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/strategies/usdt_market_neutral_strategy.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/strategies/usdt_market_neutral_no_leverage_strategy.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/strategies/eth_staking_only_strategy.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/strategies/components/position_update_handler.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/strategies/components/risk_monitor.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/strategies/components/exposure_monitor.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/strategies/components/position_monitor.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/strategies/components/__init__.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/strategies/components/event_logger.py",
      "total_async_methods": 16,
      "allowed_exceptions": [
        {
          "method": "log_event",
          "line": 68,
          "code": "async def log_event(self, event_type: str, event_data: Dict[str, Any],",
          "category": "event_logger"
        },
        {
          "method": "log_gas_fee",
          "line": 139,
          "code": "async def log_gas_fee(self, gas_fee_data: Dict[str, Any], timestamp: pd.Timestamp) -> Dict[str, Any]:",
          "category": "event_logger"
        },
        {
          "method": "log_stake",
          "line": 151,
          "code": "async def log_stake(self, stake_data: Dict[str, Any], timestamp: pd.Timestamp) -> Dict[str, Any]:",
          "category": "event_logger"
        },
        {
          "method": "log_aave_supply",
          "line": 163,
          "code": "async def log_aave_supply(self, supply_data: Dict[str, Any], timestamp: pd.Timestamp) -> Dict[str, Any]:",
          "category": "event_logger"
        },
        {
          "method": "log_aave_borrow",
          "line": 175,
          "code": "async def log_aave_borrow(self, borrow_data: Dict[str, Any], timestamp: pd.Timestamp) -> Dict[str, Any]:",
          "category": "event_logger"
        },
        {
          "method": "log_atomic_transaction",
          "line": 187,
          "code": "async def log_atomic_transaction(self, transaction_data: Dict[str, Any], timestamp: pd.Timestamp) -> Dict[str, Any]:",
          "category": "event_logger"
        },
        {
          "method": "log_perp_trade",
          "line": 199,
          "code": "async def log_perp_trade(self, trade_data: Dict[str, Any], timestamp: pd.Timestamp) -> Dict[str, Any]:",
          "category": "event_logger"
        },
        {
          "method": "log_funding_payment",
          "line": 211,
          "code": "async def log_funding_payment(self, funding_data: Dict[str, Any], timestamp: pd.Timestamp) -> Dict[str, Any]:",
          "category": "event_logger"
        },
        {
          "method": "log_venue_transfer",
          "line": 223,
          "code": "async def log_venue_transfer(self, transfer_data: Dict[str, Any], timestamp: pd.Timestamp) -> Dict[str, Any]:",
          "category": "event_logger"
        },
        {
          "method": "log_rebalance",
          "line": 235,
          "code": "async def log_rebalance(self, rebalance_data: Dict[str, Any], timestamp: pd.Timestamp) -> Dict[str, Any]:",
          "category": "event_logger"
        },
        {
          "method": "log_risk_alert",
          "line": 247,
          "code": "async def log_risk_alert(self, risk_data: Dict[str, Any], timestamp: pd.Timestamp) -> Dict[str, Any]:",
          "category": "event_logger"
        },
        {
          "method": "log_seasonal_reward_distribution",
          "line": 259,
          "code": "async def log_seasonal_reward_distribution(self, reward_data: Dict[str, Any], timestamp: pd.Timestamp) -> Dict[str, Any]:",
          "category": "event_logger"
        },
        {
          "method": "_log_event_json",
          "line": 382,
          "code": "async def _log_event_json(self, event_record: Dict[str, Any]) -> Dict[str, Any]:",
          "category": "event_logger"
        },
        {
          "method": "_log_event_csv",
          "line": 409,
          "code": "async def _log_event_csv(self, event_record: Dict[str, Any]) -> Dict[str, Any]:",
          "category": "event_logger"
        },
        {
          "method": "_log_event_text",
          "line": 439,
          "code": "async def _log_event_text(self, event_record: Dict[str, Any]) -> Dict[str, Any]:",
          "category": "event_logger"
        }
      ],
      "violations": [
        {
          "method": "update_event",
          "line": 271,
          "code": "async def update_event(self, event_key: str, update_data: Dict[str, Any],",
          "reason": "Component internal method should be synchronous per ADR-006"
        }
      ],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "PARTIAL"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/strategies/components/data_provider.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/strategies/components/execution_manager.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/strategies/components/data_subscriptions.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/strategies/components/strategy_manager.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/health/unified_health_manager.py",
      "total_async_methods": 8,
      "allowed_exceptions": [
        {
          "method": "_check_database",
          "line": 235,
          "code": "async def _check_database(self) -> str:",
          "category": "io_operations"
        }
      ],
      "violations": [
        {
          "method": "check_basic_health",
          "line": 72,
          "code": "async def check_basic_health(self) -> Dict[str, Any]:",
          "reason": "Component internal method should be synchronous per ADR-006"
        },
        {
          "method": "check_detailed_health",
          "line": 128,
          "code": "async def check_detailed_health(self) -> Dict[str, Any]:",
          "reason": "Component internal method should be synchronous per ADR-006"
        },
        {
          "method": "_get_system_metrics",
          "line": 182,
          "code": "async def _get_system_metrics(self) -> Dict[str, Any]:",
          "reason": "Component internal method should be synchronous per ADR-006"
        },
        {
          "method": "_check_infrastructure_health",
          "line": 214,
          "code": "async def _check_infrastructure_health(self) -> Dict[str, str]:",
          "reason": "Component internal method should be synchronous per ADR-006"
        },
        {
          "method": "_check_data_provider",
          "line": 255,
          "code": "async def _check_data_provider(self) -> str:",
          "reason": "Component internal method should be synchronous per ADR-006"
        },
        {
          "method": "_check_component_health",
          "line": 298,
          "code": "async def _check_component_health(self) -> Dict[str, Any]:",
          "reason": "Component internal method should be synchronous per ADR-006"
        },
        {
          "method": "_check_live_trading_health",
          "line": 343,
          "code": "async def _check_live_trading_health(self) -> Optional[Dict[str, Any]]:",
          "reason": "Component internal method should be synchronous per ADR-006"
        }
      ],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "PARTIAL"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/health/__init__.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/health/component_health.py",
      "total_async_methods": 1,
      "allowed_exceptions": [],
      "violations": [
        {
          "method": "get_system_health",
          "line": 439,
          "code": "async def get_system_health(self) -> Dict[str, Any]:",
          "reason": "Component internal method should be synchronous per ADR-006"
        }
      ],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "VIOLATION"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/math/pnl_calculator.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/math/ltv_calculator.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/math/health_calculator.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/math/margin_calculator.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/math/__init__.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/math/metrics_calculator.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/utilities/utility_manager.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/execution/wallet_transfer_executor.py",
      "total_async_methods": 7,
      "allowed_exceptions": [
        {
          "method": "execute_transfer_block",
          "line": 72,
          "code": "async def execute_transfer_block(self, transfer_block: InstructionBlock, timestamp: pd.Timestamp) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_execute_single_transfer",
          "line": 105,
          "code": "async def _execute_single_transfer(self, instruction: WalletTransferInstruction, timestamp: pd.Timestamp) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_execute_backtest_transfer",
          "line": 166,
          "code": "async def _execute_backtest_transfer(self, instruction: WalletTransferInstruction, timestamp: pd.Timestamp) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_execute_live_transfer",
          "line": 179,
          "code": "async def _execute_live_transfer(self, instruction: WalletTransferInstruction, timestamp: pd.Timestamp) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_update_position_monitor",
          "line": 185,
          "code": "async def _update_position_monitor(self, instruction: WalletTransferInstruction, timestamp: pd.Timestamp):",
          "category": "io_operations"
        },
        {
          "method": "_log_transfer_event",
          "line": 226,
          "code": "async def _log_transfer_event(self, instruction: WalletTransferInstruction, result: Dict[str, Any], timestamp: pd.Timestamp):",
          "category": "event_logger"
        }
      ],
      "violations": [
        {
          "method": "_validate_transfer",
          "line": 144,
          "code": "async def _validate_transfer(self, instruction: WalletTransferInstruction):",
          "reason": "Component internal method should be synchronous per ADR-006"
        }
      ],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "PARTIAL"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/execution/__init__.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/execution/execution_manager.py",
      "total_async_methods": 1,
      "allowed_exceptions": [
        {
          "method": "route_instruction",
          "line": 28,
          "code": "async def route_instruction(self, instruction_type: str, instruction: Dict, market_data: Dict) -> Dict:",
          "category": "api_entry_points"
        }
      ],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/services/live_service.py",
      "total_async_methods": 9,
      "allowed_exceptions": [
        {
          "method": "start_live_trading",
          "line": 89,
          "code": "async def start_live_trading(self, request: LiveTradingRequest) -> str:",
          "category": "results_store"
        },
        {
          "method": "_execute_live_trading",
          "line": 184,
          "code": "async def _execute_live_trading(self, request_id: str):",
          "category": "io_operations"
        },
        {
          "method": "stop_live_trading",
          "line": 207,
          "code": "async def stop_live_trading(self, request_id: str) -> bool:",
          "category": "results_store"
        },
        {
          "method": "emergency_stop",
          "line": 361,
          "code": "async def emergency_stop(self, request_id: str, reason: str = \"Emergency stop\") -> bool:",
          "category": "api_entry_points"
        },
        {
          "method": "get_all_running_strategies",
          "line": 377,
          "code": "async def get_all_running_strategies(self) -> List[Dict[str, Any]]:",
          "category": "io_operations"
        }
      ],
      "violations": [
        {
          "method": "get_status",
          "line": 239,
          "code": "async def get_status(self, request_id: str) -> Dict[str, Any]:",
          "reason": "Component internal method should be synchronous per ADR-006"
        },
        {
          "method": "get_performance_metrics",
          "line": 268,
          "code": "async def get_performance_metrics(self, request_id: str) -> Optional[Dict[str, Any]]:",
          "reason": "Component internal method should be synchronous per ADR-006"
        },
        {
          "method": "check_risk_limits",
          "line": 302,
          "code": "async def check_risk_limits(self, request_id: str) -> Dict[str, Any]:",
          "reason": "Component internal method should be synchronous per ADR-006"
        },
        {
          "method": "health_check",
          "line": 391,
          "code": "async def health_check(self) -> Dict[str, Any]:",
          "reason": "Component internal method should be synchronous per ADR-006"
        }
      ],
      "api_calls": [
        {
          "line": 119,
          "code": "asyncio.create_task(",
          "reason": "API call pattern"
        }
      ],
      "concurrent_patterns": [],
      "status": "PARTIAL"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/error_codes/error_code_registry.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/error_codes/__init__.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/event_engine/event_driven_strategy_engine.py",
      "total_async_methods": 6,
      "allowed_exceptions": [
        {
          "method": "run_backtest",
          "line": 372,
          "code": "async def run_backtest(self, start_date: str, end_date: str) -> Dict[str, Any]:",
          "category": "api_entry_points"
        },
        {
          "method": "_execute_strategy_decision",
          "line": 623,
          "code": "async def _execute_strategy_decision(self, decision: Dict, timestamp: pd.Timestamp, market_data: Dict):",
          "category": "io_operations"
        }
      ],
      "violations": [
        {
          "method": "_process_timestep",
          "line": 493,
          "code": "async def _process_timestep(self, timestamp: pd.Timestamp, market_data: Dict, request_id: str):",
          "reason": "Component internal method should be synchronous per ADR-006"
        },
        {
          "method": "_calculate_final_results",
          "line": 644,
          "code": "async def _calculate_final_results(self, results: Dict) -> Dict[str, Any]:",
          "reason": "Component internal method should be synchronous per ADR-006"
        },
        {
          "method": "run_live",
          "line": 680,
          "code": "async def run_live(self):",
          "reason": "Unknown async pattern - needs manual review"
        },
        {
          "method": "get_status",
          "line": 711,
          "code": "async def get_status(self) -> Dict[str, Any]:",
          "reason": "Component internal method should be synchronous per ADR-006"
        }
      ],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "PARTIAL"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/interfaces/cex_execution_interface.py",
      "total_async_methods": 14,
      "allowed_exceptions": [
        {
          "method": "execute_trade",
          "line": 165,
          "code": "async def execute_trade(self, instruction: Dict[str, Any], market_data: Dict[str, Any]) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_execute_backtest_trade",
          "line": 196,
          "code": "async def _execute_backtest_trade(self, instruction: Dict[str, Any], market_data: Dict[str, Any]) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_execute_live_trade",
          "line": 345,
          "code": "async def _execute_live_trade(self, instruction: Dict[str, Any], market_data: Dict[str, Any]) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_await_transaction_confirmation",
          "line": 441,
          "code": "async def _await_transaction_confirmation(self, venue: str, order_id: str, max_retries: int = 3, retry_delay: float = 5.0):",
          "category": "io_operations"
        },
        {
          "method": "get_balance",
          "line": 486,
          "code": "async def get_balance(self, asset: str, venue: Optional[str] = None) -> float:",
          "category": "io_operations"
        },
        {
          "method": "_get_backtest_balance",
          "line": 493,
          "code": "async def _get_backtest_balance(self, asset: str, venue: Optional[str] = None) -> float:",
          "category": "io_operations"
        },
        {
          "method": "_get_live_balance",
          "line": 499,
          "code": "async def _get_live_balance(self, asset: str, venue: Optional[str] = None) -> float:",
          "category": "io_operations"
        },
        {
          "method": "get_position",
          "line": 516,
          "code": "async def get_position(self, symbol: str, venue: Optional[str] = None) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_get_backtest_position",
          "line": 523,
          "code": "async def _get_backtest_position(self, symbol: str, venue: Optional[str] = None) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_get_live_position",
          "line": 529,
          "code": "async def _get_live_position(self, symbol: str, venue: Optional[str] = None) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "cancel_all_orders",
          "line": 558,
          "code": "async def cancel_all_orders(self, venue: Optional[str] = None) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "execute_transfer",
          "line": 590,
          "code": "async def execute_transfer(self, instruction: Dict[str, Any], market_data: Dict[str, Any]) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_execute_backtest_transfer",
          "line": 612,
          "code": "async def _execute_backtest_transfer(",
          "category": "io_operations"
        },
        {
          "method": "_execute_live_transfer",
          "line": 647,
          "code": "async def _execute_live_transfer(",
          "category": "io_operations"
        }
      ],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/interfaces/__init__.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/interfaces/onchain_execution_interface.py",
      "total_async_methods": 15,
      "allowed_exceptions": [
        {
          "method": "execute_trade",
          "line": 165,
          "code": "async def execute_trade(self, instruction: Dict[str, Any], market_data: Dict[str, Any]) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_execute_backtest_operation",
          "line": 183,
          "code": "async def _execute_backtest_operation(self, instruction: Dict[str, Any], market_data: Dict[str, Any]) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_execute_live_operation",
          "line": 279,
          "code": "async def _execute_live_operation(self, instruction: Dict[str, Any], market_data: Dict[str, Any]) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_build_transaction",
          "line": 331,
          "code": "async def _build_transaction(self, instruction: Dict[str, Any], market_data: Dict[str, Any]) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "get_balance",
          "line": 344,
          "code": "async def get_balance(self, asset: str, venue: Optional[str] = None) -> float:",
          "category": "io_operations"
        },
        {
          "method": "_get_backtest_balance",
          "line": 351,
          "code": "async def _get_backtest_balance(self, asset: str, venue: Optional[str] = None) -> float:",
          "category": "io_operations"
        },
        {
          "method": "_get_live_balance",
          "line": 357,
          "code": "async def _get_live_balance(self, asset: str, venue: Optional[str] = None) -> float:",
          "category": "io_operations"
        },
        {
          "method": "get_position",
          "line": 372,
          "code": "async def get_position(self, symbol: str, venue: Optional[str] = None) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_get_backtest_position",
          "line": 379,
          "code": "async def _get_backtest_position(self, symbol: str, venue: Optional[str] = None) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_get_live_position",
          "line": 385,
          "code": "async def _get_live_position(self, symbol: str, venue: Optional[str] = None) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "cancel_all_orders",
          "line": 391,
          "code": "async def cancel_all_orders(self, venue: Optional[str] = None) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "execute_transfer",
          "line": 399,
          "code": "async def execute_transfer(self, instruction: Dict[str, Any], market_data: Dict[str, Any]) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_execute_backtest_transfer",
          "line": 420,
          "code": "async def _execute_backtest_transfer(",
          "category": "io_operations"
        },
        {
          "method": "_execute_live_transfer",
          "line": 460,
          "code": "async def _execute_live_transfer(",
          "category": "io_operations"
        },
        {
          "method": "_build_transfer_transaction",
          "line": 518,
          "code": "async def _build_transfer_transaction(",
          "category": "io_operations"
        }
      ],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/interfaces/execution_interface_factory.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/interfaces/transfer_execution_interface.py",
      "total_async_methods": 8,
      "allowed_exceptions": [
        {
          "method": "execute_trade",
          "line": 84,
          "code": "async def execute_trade(self, instruction: Dict[str, Any], market_data: Dict[str, Any]) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "execute_transfer",
          "line": 97,
          "code": "async def execute_transfer(self, instruction: Dict[str, Any], market_data: Dict[str, Any]) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_execute_backtest_transfer",
          "line": 121,
          "code": "async def _execute_backtest_transfer(",
          "category": "io_operations"
        },
        {
          "method": "_execute_live_transfer",
          "line": 193,
          "code": "async def _execute_live_transfer(",
          "category": "io_operations"
        },
        {
          "method": "_execute_live_trade",
          "line": 257,
          "code": "async def _execute_live_trade(self, trade, market_data: Dict[str, Any]) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "get_balance",
          "line": 325,
          "code": "async def get_balance(self, asset: str, venue: Optional[str] = None) -> float:",
          "category": "io_operations"
        },
        {
          "method": "get_position",
          "line": 337,
          "code": "async def get_position(self, symbol: str, venue: Optional[str] = None) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "cancel_all_orders",
          "line": 349,
          "code": "async def cancel_all_orders(self, venue: Optional[str] = None) -> Dict[str, Any]:",
          "category": "io_operations"
        }
      ],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/core/interfaces/base_execution_interface.py",
      "total_async_methods": 7,
      "allowed_exceptions": [
        {
          "method": "execute_trade",
          "line": 48,
          "code": "async def execute_trade(self, instruction: Dict[str, Any], market_data: Dict[str, Any]) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "get_balance",
          "line": 62,
          "code": "async def get_balance(self, asset: str, venue: Optional[str] = None) -> float:",
          "category": "io_operations"
        },
        {
          "method": "get_position",
          "line": 76,
          "code": "async def get_position(self, symbol: str, venue: Optional[str] = None) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "cancel_all_orders",
          "line": 90,
          "code": "async def cancel_all_orders(self, venue: Optional[str] = None) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "execute_transfer",
          "line": 103,
          "code": "async def execute_transfer(self, instruction: Dict[str, Any], market_data: Dict[str, Any]) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_log_execution_event",
          "line": 116,
          "code": "async def _log_execution_event(self, event_type: str, details: Dict[str, Any]):",
          "category": "event_logger"
        },
        {
          "method": "_update_position_monitor",
          "line": 127,
          "code": "async def _update_position_monitor(self, changes: Dict[str, Any]):",
          "category": "io_operations"
        }
      ],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/data_provider/eth_basis_data_provider.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/data_provider/eth_staking_only_data_provider.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/data_provider/base_data_provider.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/data_provider/btc_basis_data_provider.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/data_provider/pure_lending_data_provider.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/data_provider/usdt_market_neutral_data_provider.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/data_provider/usdt_market_neutral_no_leverage_data_provider.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/data_provider/eth_leveraged_data_provider.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/api/health.py",
      "total_async_methods": 3,
      "allowed_exceptions": [
        {
          "method": "basic_health",
          "line": 24,
          "code": "async def basic_health():",
          "category": "api_entry_points"
        },
        {
          "method": "detailed_health",
          "line": 50,
          "code": "async def detailed_health():",
          "category": "api_entry_points"
        },
        {
          "method": "health_status",
          "line": 76,
          "code": "async def health_status():",
          "category": "api_entry_points"
        }
      ],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/api/__init__.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/api/main.py",
      "total_async_methods": 3,
      "allowed_exceptions": [
        {
          "method": "lifespan",
          "line": 87,
          "code": "async def lifespan(app: FastAPI):",
          "category": "api_entry_points"
        },
        {
          "method": "global_exception_handler",
          "line": 257,
          "code": "async def global_exception_handler(request: Request, exc: Exception):",
          "category": "api_entry_points"
        },
        {
          "method": "root",
          "line": 286,
          "code": "async def root():",
          "category": "api_entry_points"
        }
      ],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/api/dependencies.py",
      "total_async_methods": 24,
      "allowed_exceptions": [
        {
          "method": "_get_dependencies",
          "line": 214,
          "code": "async def _get_dependencies():",
          "category": "io_operations"
        },
        {
          "method": "run_backtest",
          "line": 332,
          "code": "async def run_backtest(self, request):",
          "category": "api_entry_points"
        },
        {
          "method": "get_result",
          "line": 344,
          "code": "async def get_result(self, request_id):",
          "category": "results_store"
        },
        {
          "method": "cancel_backtest",
          "line": 364,
          "code": "async def cancel_backtest(self, request_id):",
          "category": "api_entry_points"
        },
        {
          "method": "load_data",
          "line": 377,
          "code": "async def load_data(self, start_date, end_date):",
          "category": "io_operations"
        },
        {
          "method": "get_price",
          "line": 380,
          "code": "async def get_price(self, token: str, timestamp=None):",
          "category": "io_operations"
        },
        {
          "method": "get_lending_rate",
          "line": 392,
          "code": "async def get_lending_rate(",
          "category": "io_operations"
        },
        {
          "method": "save_result",
          "line": 442,
          "code": "async def save_result(self, result):",
          "category": "io_operations"
        },
        {
          "method": "save",
          "line": 449,
          "code": "async def save(self, request_id: str, result):",
          "category": "io_operations"
        },
        {
          "method": "get_result",
          "line": 454,
          "code": "async def get_result(self, result_id):",
          "category": "results_store"
        },
        {
          "method": "list_results",
          "line": 458,
          "code": "async def list_results(self, **kwargs):",
          "category": "results_store"
        },
        {
          "method": "delete_result",
          "line": 462,
          "code": "async def delete_result(self, result_id):",
          "category": "results_store"
        },
        {
          "method": "start_live_trading",
          "line": 489,
          "code": "async def start_live_trading(self, request):",
          "category": "results_store"
        },
        {
          "method": "stop_live_trading",
          "line": 506,
          "code": "async def stop_live_trading(self, request_id):",
          "category": "results_store"
        },
        {
          "method": "emergency_stop",
          "line": 542,
          "code": "async def emergency_stop(self, request_id, reason=\"Emergency stop\"):",
          "category": "api_entry_points"
        },
        {
          "method": "get_all_running_strategies",
          "line": 564,
          "code": "async def get_all_running_strategies(self):",
          "category": "io_operations"
        }
      ],
      "violations": [
        {
          "method": "get_unified_health_manager",
          "line": 254,
          "code": "async def get_unified_health_manager():",
          "reason": "Component internal method should be synchronous per ADR-006"
        },
        {
          "method": "get_status",
          "line": 335,
          "code": "async def get_status(self, request_id):",
          "reason": "Component internal method should be synchronous per ADR-006"
        },
        {
          "method": "get_staking_yield",
          "line": 404,
          "code": "async def get_staking_yield(self, timestamp=None):",
          "reason": "Component internal method should be synchronous per ADR-006"
        },
        {
          "method": "get_status",
          "line": 517,
          "code": "async def get_status(self, request_id):",
          "reason": "Component internal method should be synchronous per ADR-006"
        },
        {
          "method": "get_performance_metrics",
          "line": 526,
          "code": "async def get_performance_metrics(self, request_id):",
          "reason": "Component internal method should be synchronous per ADR-006"
        },
        {
          "method": "health_check",
          "line": 546,
          "code": "async def health_check(self):",
          "reason": "Component internal method should be synchronous per ADR-006"
        },
        {
          "method": "check_basic_health",
          "line": 591,
          "code": "async def check_basic_health(self):",
          "reason": "Component internal method should be synchronous per ADR-006"
        },
        {
          "method": "check_detailed_health",
          "line": 606,
          "code": "async def check_detailed_health(self):",
          "reason": "Component internal method should be synchronous per ADR-006"
        }
      ],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "PARTIAL"
    },
    {
      "file": "backend/src/basis_strategy_v1/api/middleware/__init__.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/api/middleware/correlation.py",
      "total_async_methods": 1,
      "allowed_exceptions": [
        {
          "method": "dispatch",
          "line": 14,
          "code": "async def dispatch(self, request: Request, call_next):",
          "category": "api_entry_points"
        }
      ],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/api/models/responses.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/api/models/__init__.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/api/models/requests.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/api/routes/auth.py",
      "total_async_methods": 3,
      "allowed_exceptions": [
        {
          "method": "login",
          "line": 84,
          "code": "async def login(request: LoginRequest):",
          "category": "api_entry_points"
        },
        {
          "method": "logout",
          "line": 119,
          "code": "async def logout(token_payload: Dict[str, Any] = Depends(verify_token)):",
          "category": "io_operations"
        },
        {
          "method": "get_current_user",
          "line": 134,
          "code": "async def get_current_user(token_payload: Dict[str, Any] = Depends(verify_token)):",
          "category": "io_operations"
        }
      ],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/api/routes/capital.py",
      "total_async_methods": 2,
      "allowed_exceptions": [
        {
          "method": "deposit_capital",
          "line": 42,
          "code": "async def deposit_capital(",
          "category": "api_entry_points"
        },
        {
          "method": "withdraw_capital",
          "line": 98,
          "code": "async def withdraw_capital(",
          "category": "api_entry_points"
        }
      ],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/api/routes/live_trading.py",
      "total_async_methods": 7,
      "allowed_exceptions": [
        {
          "method": "start_live_trading",
          "line": 29,
          "code": "async def start_live_trading(",
          "category": "results_store"
        },
        {
          "method": "get_live_trading_status",
          "line": 119,
          "code": "async def get_live_trading_status(",
          "category": "api_entry_points"
        },
        {
          "method": "get_live_trading_performance",
          "line": 169,
          "code": "async def get_live_trading_performance(",
          "category": "api_entry_points"
        },
        {
          "method": "stop_live_trading",
          "line": 218,
          "code": "async def stop_live_trading(",
          "category": "results_store"
        },
        {
          "method": "emergency_stop_live_trading",
          "line": 262,
          "code": "async def emergency_stop_live_trading(",
          "category": "api_entry_points"
        },
        {
          "method": "list_running_strategies",
          "line": 311,
          "code": "async def list_running_strategies(",
          "category": "io_operations"
        },
        {
          "method": "manual_rebalance",
          "line": 345,
          "code": "async def manual_rebalance(",
          "category": "io_operations"
        }
      ],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/api/routes/charts.py",
      "total_async_methods": 3,
      "allowed_exceptions": [
        {
          "method": "list_charts",
          "line": 23,
          "code": "async def list_charts(",
          "category": "api_entry_points"
        },
        {
          "method": "get_chart",
          "line": 141,
          "code": "async def get_chart(",
          "category": "api_entry_points"
        },
        {
          "method": "get_dashboard",
          "line": 298,
          "code": "async def get_dashboard(",
          "category": "api_entry_points"
        }
      ],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/api/routes/strategies.py",
      "total_async_methods": 5,
      "allowed_exceptions": [
        {
          "method": "list_strategies",
          "line": 100,
          "code": "async def list_strategies(",
          "category": "api_entry_points"
        },
        {
          "method": "get_strategy",
          "line": 169,
          "code": "async def get_strategy(",
          "category": "api_entry_points"
        },
        {
          "method": "get_merged_config",
          "line": 240,
          "code": "async def get_merged_config(",
          "category": "api_entry_points"
        }
      ],
      "violations": [
        {
          "method": "get_mode_config",
          "line": 318,
          "code": "async def get_mode_config(",
          "reason": "Component internal method should be synchronous per ADR-006"
        },
        {
          "method": "list_modes",
          "line": 384,
          "code": "async def list_modes(",
          "reason": "Unknown async pattern - needs manual review"
        }
      ],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "PARTIAL"
    },
    {
      "file": "backend/src/basis_strategy_v1/api/routes/results.py",
      "total_async_methods": 6,
      "allowed_exceptions": [
        {
          "method": "get_result_events",
          "line": 31,
          "code": "async def get_result_events(",
          "category": "results_store"
        },
        {
          "method": "get_export_info",
          "line": 88,
          "code": "async def get_export_info(",
          "category": "api_entry_points"
        },
        {
          "method": "download_result_assets",
          "line": 137,
          "code": "async def download_result_assets(",
          "category": "io_operations"
        },
        {
          "method": "list_results",
          "line": 330,
          "code": "async def list_results(",
          "category": "results_store"
        },
        {
          "method": "get_result",
          "line": 430,
          "code": "async def get_result(",
          "category": "results_store"
        },
        {
          "method": "delete_result",
          "line": 533,
          "code": "async def delete_result(",
          "category": "results_store"
        }
      ],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/api/routes/health.py",
      "total_async_methods": 2,
      "allowed_exceptions": [
        {
          "method": "basic_health",
          "line": 21,
          "code": "async def basic_health() -> HealthResponse:",
          "category": "api_entry_points"
        },
        {
          "method": "detailed_health",
          "line": 53,
          "code": "async def detailed_health(request: Request) -> HealthResponse:",
          "category": "api_entry_points"
        }
      ],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/api/routes/__init__.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/api/routes/backtest.py",
      "total_async_methods": 4,
      "allowed_exceptions": [
        {
          "method": "run_backtest",
          "line": 27,
          "code": "async def run_backtest(",
          "category": "api_entry_points"
        },
        {
          "method": "get_backtest_status",
          "line": 113,
          "code": "async def get_backtest_status(",
          "category": "api_entry_points"
        },
        {
          "method": "get_backtest_result",
          "line": 164,
          "code": "async def get_backtest_result(",
          "category": "api_entry_points"
        },
        {
          "method": "cancel_backtest",
          "line": 296,
          "code": "async def cancel_backtest(",
          "category": "api_entry_points"
        }
      ],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/__init__.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/visualization/__init__.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/visualization/chart_generator.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/cache/__init__.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/config/environment_loader.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/config/config_loader.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/config/config_manager.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/config/models.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/config/config_validator.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/config/__init__.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/health/health_checker.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/storage/__init__.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/storage/chart_storage.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/persistence/async_results_store.py",
      "total_async_methods": 9,
      "allowed_exceptions": [
        {
          "method": "start",
          "line": 69,
          "code": "async def start(self):",
          "category": "results_store"
        },
        {
          "method": "stop",
          "line": 79,
          "code": "async def stop(self):",
          "category": "results_store"
        },
        {
          "method": "_worker",
          "line": 105,
          "code": "async def _worker(self):",
          "category": "results_store"
        },
        {
          "method": "save_timestep_result",
          "line": 142,
          "code": "async def save_timestep_result(self, request_id: str, timestamp: pd.Timestamp, data: Dict[str, Any]):",
          "category": "io_operations"
        },
        {
          "method": "save_final_result",
          "line": 159,
          "code": "async def save_final_result(self, request_id: str, data: Dict[str, Any]):",
          "category": "io_operations"
        },
        {
          "method": "save_event_log",
          "line": 174,
          "code": "async def save_event_log(self, request_id: str, events: List[Dict[str, Any]]):",
          "category": "io_operations"
        },
        {
          "method": "_write_timestep_result",
          "line": 189,
          "code": "async def _write_timestep_result(self, item: Dict):",
          "category": "io_operations"
        },
        {
          "method": "_write_final_result",
          "line": 211,
          "code": "async def _write_final_result(self, item: Dict):",
          "category": "io_operations"
        },
        {
          "method": "_write_event_log",
          "line": 231,
          "code": "async def _write_event_log(self, item: Dict):",
          "category": "io_operations"
        }
      ],
      "violations": [],
      "api_calls": [
        {
          "line": 76,
          "code": "asyncio.create_task(",
          "reason": "API call pattern"
        }
      ],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/persistence/__init__.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/persistence/result_store.py",
      "total_async_methods": 4,
      "allowed_exceptions": [
        {
          "method": "save_result",
          "line": 28,
          "code": "async def save_result(self, request_id: str, result: Dict[str, Any]) -> None:",
          "category": "io_operations"
        },
        {
          "method": "get_result",
          "line": 93,
          "code": "async def get_result(self, request_id: str) -> Optional[Dict[str, Any]]:",
          "category": "results_store"
        },
        {
          "method": "list_results",
          "line": 130,
          "code": "async def list_results(self,",
          "category": "results_store"
        },
        {
          "method": "delete_result",
          "line": 187,
          "code": "async def delete_result(self, request_id: str) -> bool:",
          "category": "results_store"
        }
      ],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/monitoring/logging.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/monitoring/metrics.py",
      "total_async_methods": 2,
      "allowed_exceptions": [],
      "violations": [
        {
          "method": "async_wrapper",
          "line": 81,
          "code": "async def async_wrapper(*args, **kwargs) -> Any:",
          "reason": "Component internal method should be synchronous per ADR-006"
        },
        {
          "method": "wrapper",
          "line": 131,
          "code": "async def wrapper(*args, **kwargs) -> Any:",
          "reason": "Unknown async pattern - needs manual review"
        }
      ],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "VIOLATION"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/monitoring/__init__.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/data/data_provider_factory.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/data/data_validator.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/data/live_data_provider.py",
      "total_async_methods": 33,
      "allowed_exceptions": [
        {
          "method": "validate_live_data_connections",
          "line": 203,
          "code": "async def validate_live_data_connections(self) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_test_eth_spot_connection",
          "line": 268,
          "code": "async def _test_eth_spot_connection(self) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_test_btc_spot_connection",
          "line": 273,
          "code": "async def _test_btc_spot_connection(self) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_test_funding_rate_connections",
          "line": 278,
          "code": "async def _test_funding_rate_connections(self) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_test_gas_price_connection",
          "line": 289,
          "code": "async def _test_gas_price_connection(self) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_test_aave_rate_connection",
          "line": 294,
          "code": "async def _test_aave_rate_connection(self) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_test_staking_yield_connection",
          "line": 300,
          "code": "async def _test_staking_yield_connection(self) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "_test_lst_market_price_connection",
          "line": 306,
          "code": "async def _test_lst_market_price_connection(self) -> Dict[str, Any]:",
          "category": "io_operations"
        },
        {
          "method": "__aenter__",
          "line": 312,
          "code": "async def __aenter__(self):",
          "category": "io_operations"
        },
        {
          "method": "__aexit__",
          "line": 319,
          "code": "async def __aexit__(self, exc_type, exc_val, exc_tb):",
          "category": "io_operations"
        },
        {
          "method": "get_spot_price",
          "line": 324,
          "code": "async def get_spot_price(self, asset: str) -> float:",
          "category": "io_operations"
        },
        {
          "method": "get_futures_price",
          "line": 346,
          "code": "async def get_futures_price(self, asset: str, venue: str) -> float:",
          "category": "io_operations"
        },
        {
          "method": "get_funding_rate",
          "line": 370,
          "code": "async def get_funding_rate(self, asset: str, venue: str) -> float:",
          "category": "io_operations"
        },
        {
          "method": "get_oracle_price",
          "line": 411,
          "code": "async def get_oracle_price(self, lst_type: str) -> float:",
          "category": "io_operations"
        },
        {
          "method": "get_lst_market_price",
          "line": 428,
          "code": "async def get_lst_market_price(self, lst_type: str) -> float:",
          "category": "io_operations"
        },
        {
          "method": "_get_eth_spot_price",
          "line": 516,
          "code": "async def _get_eth_spot_price(self) -> float:",
          "category": "io_operations"
        },
        {
          "method": "_get_btc_spot_price",
          "line": 531,
          "code": "async def _get_btc_spot_price(self) -> float:",
          "category": "io_operations"
        },
        {
          "method": "_get_binance_futures_price",
          "line": 546,
          "code": "async def _get_binance_futures_price(self, asset: str) -> float:",
          "category": "io_operations"
        },
        {
          "method": "_get_binance_funding_rate",
          "line": 563,
          "code": "async def _get_binance_funding_rate(self, asset: str) -> float:",
          "category": "io_operations"
        },
        {
          "method": "_get_bybit_futures_price",
          "line": 580,
          "code": "async def _get_bybit_futures_price(self, asset: str) -> float:",
          "category": "io_operations"
        },
        {
          "method": "_get_bybit_funding_rate",
          "line": 600,
          "code": "async def _get_bybit_funding_rate(self, asset: str) -> float:",
          "category": "io_operations"
        },
        {
          "method": "_get_okx_futures_price",
          "line": 621,
          "code": "async def _get_okx_futures_price(self, asset: str) -> float:",
          "category": "io_operations"
        },
        {
          "method": "_get_okx_funding_rate",
          "line": 641,
          "code": "async def _get_okx_funding_rate(self, asset: str) -> float:",
          "category": "io_operations"
        },
        {
          "method": "_get_aave_oracle_price",
          "line": 668,
          "code": "async def _get_aave_oracle_price(self, lst_type: str) -> float:",
          "category": "io_operations"
        },
        {
          "method": "_get_dex_lst_price",
          "line": 674,
          "code": "async def _get_dex_lst_price(self, lst_type: str) -> float:",
          "category": "io_operations"
        },
        {
          "method": "_get_from_cache",
          "line": 711,
          "code": "async def _get_from_cache(self, key: str) -> Optional[Dict]:",
          "category": "io_operations"
        },
        {
          "method": "_set_cache",
          "line": 723,
          "code": "async def _set_cache(self, key: str, data: Dict):",
          "category": "io_operations"
        },
        {
          "method": "clear_cache",
          "line": 729,
          "code": "async def clear_cache(self):",
          "category": "io_operations"
        }
      ],
      "violations": [
        {
          "method": "get_aave_index",
          "line": 394,
          "code": "async def get_aave_index(self, asset: str, index_type: str) -> float:",
          "reason": "Component internal method should be synchronous per ADR-006"
        },
        {
          "method": "get_gas_cost",
          "line": 445,
          "code": "async def get_gas_cost(self, operation: str) -> float:",
          "reason": "Component internal method should be synchronous per ADR-006"
        },
        {
          "method": "get_market_data_snapshot",
          "line": 462,
          "code": "async def get_market_data_snapshot(self) -> Dict:",
          "reason": "Component internal method should be synchronous per ADR-006"
        },
        {
          "method": "_get_aave_index_live",
          "line": 662,
          "code": "async def _get_aave_index_live(self, asset: str, index_type: str) -> float:",
          "reason": "Component internal method should be synchronous per ADR-006"
        },
        {
          "method": "_get_gas_cost_live",
          "line": 680,
          "code": "async def _get_gas_cost_live(self, operation: str) -> float:",
          "reason": "Component internal method should be synchronous per ADR-006"
        }
      ],
      "api_calls": [
        {
          "line": 110,
          "code": "aiohttp.ClientSession",
          "reason": "API call pattern"
        },
        {
          "line": 314,
          "code": "aiohttp.ClientSession",
          "reason": "API call pattern"
        }
      ],
      "concurrent_patterns": [],
      "status": "PARTIAL"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/data/__init__.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/data/historical_data_provider.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/data/config_driven_historical_data_provider.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    },
    {
      "file": "backend/src/basis_strategy_v1/infrastructure/logging/structured_logger.py",
      "total_async_methods": 0,
      "allowed_exceptions": [],
      "violations": [],
      "api_calls": [],
      "concurrent_patterns": [],
      "status": "COMPLIANT"
    }
  ],
  "summary": {
    "total_violations": 35,
    "total_exceptions": 168,
    "total_concurrent_patterns": 0,
    "priority_files_with_violations": 0,
    "compliance_rate": 89.32038834951457
  }
}